// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"gil_teacher/app/conf"
	"gil_teacher/app/core/logger"
	"gil_teacher/app/dao"
	behavior2 "gil_teacher/app/dao/behavior"
	"gil_teacher/app/domain/behavior"
	"github.com/elastic/go-elasticsearch/v8"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// 不需要 http rpc 等服务
// wireApp init kratos application.
func wireApp(serverConf *conf.Server, cnf *conf.Conf, data *conf.Data, config *conf.Config, logger2 log.Logger) (*behavior.BehaviorHandler, func(), error) {
	contextLogger := logger.NewContextLogger(logger2)
	v, cleanup, err := dao.NewClickHouseRWClient(data, contextLogger)
	if err != nil {
		return nil, nil, err
	}
	behaviorDAO := behavior2.NewBehaviorDAO(v, contextLogger)
	apiRdbClient := dao.NewApiRedisClient(cnf, contextLogger)
	behaviorHandler := behavior.NewBehaviorHandler(behaviorDAO, apiRdbClient, contextLogger)
	return behaviorHandler, func() {
		cleanup()
	}, nil
}

// wire.go:

// newElasticsearchClient creates a new Elasticsearch client.
func NewElasticsearchClient(config *conf.Elasticsearch) (*elasticsearch.Client, error) {
	esCfg := elasticsearch.Config{
		Addresses: []string{config.EsURL},
		Username:  config.Username,
		Password:  config.Password,
	}
	client, err := elasticsearch.NewClient(esCfg)
	if err != nil {
		return nil, err
	}
	return client, nil
}
